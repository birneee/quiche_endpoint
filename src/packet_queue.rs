use quiche::SendInfo;
use std::collections::VecDeque;

const MAX_BUFFER_SIZE: usize = 2048;

/// PacketQueue is used for sending out packets in batches.
/// /// Inspired by tquic.
pub(crate) struct PacketQueue {
    /// Outgoing packets generated by the endpoint.
    packets: VecDeque<(Vec<u8>, SendInfo)>,

    buffers: VecDeque<Vec<u8>>,
}

impl PacketQueue {
    pub(crate) fn new() -> Self {
        Self {
            packets: VecDeque::new(),
            buffers: VecDeque::new(),
        }
    }

    /// Add a packet to queue for sending in batches.
    pub(crate) fn push_packet(&mut self, pkt: Vec<u8>, info: SendInfo) {
        self.packets.push_back((pkt, info));
    }

    // Get a queued packet.
    pub(crate) fn pop_packet(&mut self) -> Option<(Vec<u8>, SendInfo)> {
        self.packets.pop_front()
    }

    /// Get a packet buffer from the buffer pool.
    pub(crate) fn pop_buffer(&mut self) -> Vec<u8> {
        match self.buffers.pop_front() {
            Some(v) => v,
            None => vec![0; MAX_BUFFER_SIZE],
        }
    }

    /// Return a packet buffer from the buffer pool.
    pub(crate) fn push_buffer(&mut self, mut buf: Vec<u8>) {
        buf.resize(MAX_BUFFER_SIZE, 0);
        self.buffers.push_back(buf);
    }

    /// Number of packets
    pub(crate) fn packet_count(&self) -> usize {
        self.packets.len()
    }
}